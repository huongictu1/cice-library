public interface IEmailService
{
    void Send(string from, string to, string subject, string html);
}
public class MailService
{
    const string SmtpHost = "mail.cvn.canon.co.jp";
    const int SmtpPort = 25;
    MailMessage mail;
    public MailService(List<string> txtto, string txtsub, string txtcontent)
    {
        mail = _createMail2(txtto, txtsub, txtcontent);
    }
    private MailMessage _createMail2(List<string> txtto, string txtsub, string txtcontent)
    {
        MailMessage mailMsg = new MailMessage();
        mailMsg.From = new MailAddress("cvn-contract@local.canon-vn.com.vn");
        if (txtto == null || txtto.Count < 1)
        {
            mailMsg.To.Add("it-app26@local.canon-vn.com.vn");
        }
        else
        {
            foreach(var item in txtto)
            {
                if(string.IsNullOrEmpty(item) || item.Equals(""))
                {
                    continue;
                }
                mailMsg.To.Add(item);
            }
        }
        mailMsg.Bcc.Add("it-app26@local.canon-vn.com.vn");
        mailMsg.Subject = string.IsNullOrEmpty(txtsub) ? "No subject": txtsub;
        mailMsg.IsBodyHtml = true;
        mailMsg.Body = txtcontent;
        mailMsg.Priority = MailPriority.High;
        return mailMsg;
    }
    public bool Send()
    {
        try
        {
            if (string.IsNullOrEmpty(mail.Subject) || mail.Subject.Equals("") || mail.Subject.Equals("No subject"))
            {
                return false;
            }
            var client = new SmtpClient()
            {
                Host = SmtpHost,
                Port = SmtpPort,
                DeliveryMethod = SmtpDeliveryMethod.Network,
                UseDefaultCredentials = false
            };
            client.SendCompleted += SendCompletedCallback;
            client.SendMailAsync(mail);
            return true;
        }
        catch { }
        return false;
    }
    private void SendCompletedCallback(object sender, AsyncCompletedEventArgs e)
    {
        if (e.Cancelled)
        {
            Console.WriteLine("Send email cancelled");
        }
        if (e.Error != null)
        {
            Console.WriteLine("Error when send email: " + e.Error.Message);
        }
        else
        {
            Console.WriteLine("Send email successful !");
        }
        ((SmtpClient)sender).Dispose();
    }
}
public class MailService
{
    private static SmtpClient _client;
    private static BlockingCollection<MailMessage> _mailQueue = new BlockingCollection<MailMessage>();

    public MailService(string host, int port)
    {
        _client = new SmtpClient(host, port)
        {
            DeliveryMethod = SmtpDeliveryMethod.Network,
            UseDefaultCredentials = false
        };

        // Bắt đầu xử lý hàng đợi
        Task.Run(() => ProcessQueue());
    }

    private void ProcessQueue()
    {
        foreach (var mail in _mailQueue.GetConsumingEnumerable())
        {
            SendMail(mail);
        }
    }

    private void SendMail(MailMessage mail)
    {
        try
        {
            _client.Send(mail);
            Console.WriteLine("Email sent successfully to " + string.Join(", ", mail.To));
        }
        catch (Exception e)
        {
            Console.WriteLine("Failed to send email: " + e.Message);
        }
    }

    public void QueueMail(MailMessage mail)
    {
        _mailQueue.Add(mail);
    }

    public static void Dispose()
    {
        _client.Dispose();
        _mailQueue.CompleteAdding();
    }
}
