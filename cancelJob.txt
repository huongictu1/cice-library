//tạo các class
public class JobCancellationFilter : JobFilterAttribute, IApplyStateFilter
    {
        private readonly IJobCancellationToken _jobCancellationToken;

        public JobCancellationFilter(IJobCancellationToken jobCancellationToken)
        {
            _jobCancellationToken = jobCancellationToken;
        }

        public void OnStateApplied(ApplyStateContext context, IWriteOnlyTransaction transaction)
        {
            // Check if the new state is Deleted
            if (context.NewState is DeletedState)
            {
                // Get the cancellation token source and cancel the job if it exists
                var tokenSource = _jobCancellationToken.GetTokenSource(context.BackgroundJob.Id);
                if (tokenSource != null)
                {
                    tokenSource.Cancel();
                }
            }
        }

        public void OnStateUnapplied(ApplyStateContext context, IWriteOnlyTransaction transaction) { }
    }
    public interface IJobCancellationToken
    {
        void RegisterToken(string jobId, CancellationTokenSource cancellationTokenSource);
        CancellationTokenSource GetTokenSource(string jobId);
    }

    public class JobCancellationToken : IJobCancellationToken
    {
        private readonly ConcurrentDictionary<string, CancellationTokenSource> _tokens = new ConcurrentDictionary<string, CancellationTokenSource>();

        public void RegisterToken(string jobId, CancellationTokenSource cancellationTokenSource)
        {
            _tokens[jobId] = cancellationTokenSource;
        }

        public CancellationTokenSource GetTokenSource(string jobId)
        {
            _tokens.TryGetValue(jobId, out var tokenSource);
            return tokenSource;
        }
    }
    public class MyJob
    {
        public void Execute(CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            while (true)
            {
                Console.WriteLine($"{DateTime.Now.ToString("HHmmss.fff")}");
                cancellationToken.ThrowIfCancellationRequested();
                Thread.Sleep(10);
            }
            cancellationToken.ThrowIfCancellationRequested();
        }
    }

//tại program.cs
builder.Services.AddSingleton<Project.IJobCancellationToken, Project.JobCancellationToken>();
builder.Services.AddScoped<JobCancellationFilter>();
GlobalJobFilters.Filters.Add(new JobCancellationFilter(new Project.JobCancellationToken()));

//tại hangfire controller
var cancellationTokenSource = new CancellationTokenSource();
var jobId = BackgroundJob.Enqueue(() => new MyJob().Execute(cancellationTokenSource.Token));
