//tạo các class
CREATE OR REPLACE FUNCTION read_log_after_time(filename text, start_time text)
RETURNS text
LANGUAGE plpython3u
AS $$
import os
import re

file_path = os.path.join('/path/to/pg_log', filename)
with open(file_path, 'r') as file:
    lines = file.readlines()

# Regular expression to match timestamp and filter lines
pattern = re.compile(r'^\d{4}-\d{2}-\d{2} (\d{2}:\d{2}:\d{2})')
filtered_lines = []

for line in lines:
    match = pattern.match(line)
    if match:
        timestamp = match.group(1)
        if timestamp >= start_time:
            filtered_lines.append(line)

return ''.join(filtered_lines)
$$;
#-------------------------------------------------------------------
# Database settings
#-------------------------------------------------------------------
database = postgres
pg_host = 192.168.173.67
pg_port = 5432
pg_user = kong
pg_password = kong123
pg_database = Kong

#-------------------------------------------------------------------
# Network settings
#-------------------------------------------------------------------
admin_listen = 0.0.0.0:8001, 0.0.0.0:8444 ssl
proxy_listen = 0.0.0.0:8000, 0.0.0.0:8443 ssl
trusted_ips = 0.0.0.0/0, ::/0

#-------------------------------------------------------------------
# Logging settings
#-------------------------------------------------------------------
admin_access_log = /usr/local/kong/logs/admin_access.log
admin_error_log = /usr/local/kong/logs/error.log

#-------------------------------------------------------------------
# Misc settings
#-------------------------------------------------------------------
plugins = bundled
public class JobCancellationFilter : JobFilterAttribute, IApplyStateFilter
    {
        private readonly IJobCancellationToken _jobCancellationToken;

        public JobCancellationFilter(IJobCancellationToken jobCancellationToken)
        {
            _jobCancellationToken = jobCancellationToken;
        }

        public void OnStateApplied(ApplyStateContext context, IWriteOnlyTransaction transaction)
        {
            // Check if the new state is Deleted
            if (context.NewState is DeletedState)
            {
                // Get the cancellation token source and cancel the job if it exists
                var tokenSource = _jobCancellationToken.GetTokenSource(context.BackgroundJob.Id);
                if (tokenSource != null)
                {
                    tokenSource.Cancel();
                }
            }
        }

        public void OnStateUnapplied(ApplyStateContext context, IWriteOnlyTransaction transaction) { }
    }
    public interface IJobCancellationToken
    {
        void RegisterToken(string jobId, CancellationTokenSource cancellationTokenSource);
        CancellationTokenSource GetTokenSource(string jobId);
    }

    public class JobCancellationToken : IJobCancellationToken
    {
        private readonly ConcurrentDictionary<string, CancellationTokenSource> _tokens = new ConcurrentDictionary<string, CancellationTokenSource>();

        public void RegisterToken(string jobId, CancellationTokenSource cancellationTokenSource)
        {
            _tokens[jobId] = cancellationTokenSource;
        }

        public CancellationTokenSource GetTokenSource(string jobId)
        {
            _tokens.TryGetValue(jobId, out var tokenSource);
            return tokenSource;
        }
    }
    public class MyJob
    {
        public void Execute(CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            while (true)
            {
                Console.WriteLine($"{DateTime.Now.ToString("HHmmss.fff")}");
                cancellationToken.ThrowIfCancellationRequested();
                Thread.Sleep(10);
            }
            cancellationToken.ThrowIfCancellationRequested();
        }
    }

//tại program.cs
builder.Services.AddSingleton<Project.IJobCancellationToken, Project.JobCancellationToken>();
builder.Services.AddScoped<JobCancellationFilter>();
GlobalJobFilters.Filters.Add(new JobCancellationFilter(new Project.JobCancellationToken()));

//tại hangfire controller
var cancellationTokenSource = new CancellationTokenSource();
var jobId = BackgroundJob.Enqueue(() => new MyJob().Execute(cancellationTokenSource.Token));
