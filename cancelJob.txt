public class CustomDirectoryBrowserMiddleware
{
    private readonly RequestDelegate _next;
    private readonly IFileProvider _fileProvider;
    private readonly string _requestPath;

    public CustomDirectoryBrowserMiddleware(RequestDelegate next, IFileProvider fileProvider, string requestPath)
    {
        _next = next;
        _fileProvider = fileProvider;
        _requestPath = requestPath;
    }

    public async Task InvokeAsync(HttpContext context)
    {
        // Kiểm tra xem yêu cầu có bắt đầu bằng requestPath không
        if (context.Request.Path.StartsWithSegments(_requestPath, out var remainingPath))
        {
            var contents = _fileProvider.GetDirectoryContents(remainingPath);
            if (contents.Exists)
            {
                var sortedContents = contents.OrderBy(f => f.Name).ToList(); // Sắp xếp theo tên

                context.Response.ContentType = "text/html";
                await context.Response.WriteAsync(@"
<!DOCTYPE html>
<html lang='en'>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>Directory Browser</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        header {
            margin-bottom: 20px;
        }
        #breadcrumb {
            margin-bottom: 20px;
        }
        #index {
            width: 100%;
            border-collapse: collapse;
        }
        #index th, #index td {
            padding: 8px 12px;
            border: 1px solid #ddd;
        }
        #index th {
            background-color: #f4f4f4;
        }
        .name a {
            color: #007bff;
            text-decoration: none;
        }
        .name a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <header>
        <h1>Index of <span id='current-path'>" + remainingPath + @"</span></h1>
    </header>
    <nav id='breadcrumb'>" + CreateBreadcrumb(context.Request.Path.Value) + @"</nav>
    <section id='main'>
        <table id='index' summary='The list of files in the given directory. Column headers are listed in the first row.'>
            <thead>
                <tr>
                    <th abbr='Name'>Name</th>
                    <th abbr='Size'>Size</th>
                    <th abbr='Modified'>Last Modified</th>
                </tr>
            </thead>
            <tbody id='file-list'>
                " + CreateFileList(sortedContents) + @"
            </tbody>
        </table>
    </section>
</body>
</html>
");
                return;
            }
        }

        await _next(context);
    }

    private string CreateBreadcrumb(string path)
    {
        var parts = path.Split('/').Where(part => !string.IsNullOrEmpty(part)).ToArray();
        var breadcrumb = string.Join(" / ", parts.Select((part, index) => 
        {
            var href = "/" + string.Join("/", parts.Take(index + 1));
            return $"<a href='{href}'>{part}</a>";
        }));
        return breadcrumb;
    }

    private string CreateFileList(IEnumerable<IFileInfo> contents)
    {
        var rows = contents.Select(file => $@"
<tr class='file'>
    <td class='name'><a href='{(file.IsDirectory ? file.Name : "." + file.Name)}'>{file.Name}</a></td>
    <td class='length'>{(file.IsDirectory ? "-" : file.Length.ToString("N0"))}</td>
    <td class='modified'>{file.LastModified.ToString("G")}</td>
</tr>").ToArray();
        return string.Join(Environment.NewLine, rows);
    }
}
global:
  scrape_interval: 15s  # Tần suất thu thập dữ liệu
  evaluation_interval: 15s  # Tần suất đánh giá các biểu thức rule

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']  # Địa chỉ Prometheus server

  - job_name: 'blackbox'
    metrics_path: /probe
    params:
      module: [http_2xx]  # Module để sử dụng (http_2xx, http_4xx, icmp, dns, etc.)
    static_configs:
      - targets:
        - http://example.com  # URL bạn muốn monitor
        - http://example.org
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: <your-blackbox-exporter-host>:9115  # Địa chỉ của Blackbox Exporter

alerting:
  alertmanagers:
    - static_configs:
        - targets: ['localhost:9093']  # Địa chỉ của Alertmanager

rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

# Định nghĩa thêm các scrape_configs khác tại đây
//tạo các class
CREATE OR REPLACE FUNCTION read_log_after_time(filename text, start_time text)
RETURNS text
LANGUAGE plpython3u
AS $$
import os
import re

file_path = os.path.join('/path/to/pg_log', filename)
with open(file_path, 'r') as file:
    lines = file.readlines()

# Regular expression to match timestamp and filter lines
pattern = re.compile(r'^\d{4}-\d{2}-\d{2} (\d{2}:\d{2}:\d{2})')
filtered_lines = []

for line in lines:
    match = pattern.match(line)
    if match:
        timestamp = match.group(1)
        if timestamp >= start_time:
            filtered_lines.append(line)

return ''.join(filtered_lines)
$$;
#-------------------------------------------------------------------
# Database settings
#-------------------------------------------------------------------
database = postgres
pg_host = 192.168.173.67
pg_port = 5432
pg_user = kong
pg_password = kong123
pg_database = Kong

#-------------------------------------------------------------------
# Network settings
#-------------------------------------------------------------------
admin_listen = 0.0.0.0:8001, 0.0.0.0:8444 ssl
proxy_listen = 0.0.0.0:8000, 0.0.0.0:8443 ssl
trusted_ips = 0.0.0.0/0, ::/0

#-------------------------------------------------------------------
# Logging settings
#-------------------------------------------------------------------
admin_access_log = /usr/local/kong/logs/admin_access.log
admin_error_log = /usr/local/kong/logs/error.log

#-------------------------------------------------------------------
# Misc settings
#-------------------------------------------------------------------
plugins = bundled
public class JobCancellationFilter : JobFilterAttribute, IApplyStateFilter
    {
        private readonly IJobCancellationToken _jobCancellationToken;

        public JobCancellationFilter(IJobCancellationToken jobCancellationToken)
        {
            _jobCancellationToken = jobCancellationToken;
        }

        public void OnStateApplied(ApplyStateContext context, IWriteOnlyTransaction transaction)
        {
            // Check if the new state is Deleted
            if (context.NewState is DeletedState)
            {
                // Get the cancellation token source and cancel the job if it exists
                var tokenSource = _jobCancellationToken.GetTokenSource(context.BackgroundJob.Id);
                if (tokenSource != null)
                {
                    tokenSource.Cancel();
                }
            }
        }

        public void OnStateUnapplied(ApplyStateContext context, IWriteOnlyTransaction transaction) { }
    }
    public interface IJobCancellationToken
    {
        void RegisterToken(string jobId, CancellationTokenSource cancellationTokenSource);
        CancellationTokenSource GetTokenSource(string jobId);
    }

    public class JobCancellationToken : IJobCancellationToken
    {
        private readonly ConcurrentDictionary<string, CancellationTokenSource> _tokens = new ConcurrentDictionary<string, CancellationTokenSource>();

        public void RegisterToken(string jobId, CancellationTokenSource cancellationTokenSource)
        {
            _tokens[jobId] = cancellationTokenSource;
        }

        public CancellationTokenSource GetTokenSource(string jobId)
        {
            _tokens.TryGetValue(jobId, out var tokenSource);
            return tokenSource;
        }
    }
    public class MyJob
    {
        public void Execute(CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            while (true)
            {
                Console.WriteLine($"{DateTime.Now.ToString("HHmmss.fff")}");
                cancellationToken.ThrowIfCancellationRequested();
                Thread.Sleep(10);
            }
            cancellationToken.ThrowIfCancellationRequested();
        }
    }

//tại program.cs
builder.Services.AddSingleton<Project.IJobCancellationToken, Project.JobCancellationToken>();
builder.Services.AddScoped<JobCancellationFilter>();
GlobalJobFilters.Filters.Add(new JobCancellationFilter(new Project.JobCancellationToken()));

//tại hangfire controller
var cancellationTokenSource = new CancellationTokenSource();
var jobId = BackgroundJob.Enqueue(() => new MyJob().Execute(cancellationTokenSource.Token));
