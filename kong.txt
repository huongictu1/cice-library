public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
    var physicalFileProvider = new PhysicalFileProvider(Path.Combine(env.ContentRootPath, "YourDirectory"));
    var requestPath = "/files";

    app.UseStaticFiles(new StaticFileOptions
    {
        FileProvider = physicalFileProvider,
        RequestPath = requestPath
    });

    app.UseDirectoryBrowser(new DirectoryBrowserOptions
    {
        FileProvider = physicalFileProvider,
        RequestPath = requestPath
    });

    app.UseMiddleware<CustomDirectoryBrowserMiddleware>(physicalFileProvider, requestPath);
}

public class CustomDirectoryBrowserMiddleware
{
    private readonly RequestDelegate _next;
    private readonly IFileProvider _fileProvider;
    private readonly string _requestPath;

    public CustomDirectoryBrowserMiddleware(RequestDelegate next, IFileProvider fileProvider, string requestPath)
    {
        _next = next;
        _fileProvider = fileProvider;
        _requestPath = requestPath;
    }

    public async Task InvokeAsync(HttpContext context)
    {
        if (context.Request.Path.StartsWithSegments(_requestPath))
        {
            var contents = _fileProvider.GetDirectoryContents(context.Request.Path.Value.Substring(_requestPath.Length));
            if (contents.Exists)
            {
                var sortedContents = contents.OrderBy(f => f.Name).ToList(); // Sắp xếp theo tên

                context.Response.ContentType = "text/html";
                await context.Response.WriteAsync("<html><body><ul>");
                foreach (var file in sortedContents)
                {
                    var filePath = Path.Combine(_requestPath, file.Name);
                    await context.Response.WriteAsync($"<li><a href='{filePath}'>{file.Name}</a></li>");
                }
                await context.Response.WriteAsync("</ul></body></html>");
                return;
            }
        }

        await _next(context);
    }
}
using System;
using System.IO;
using System.Diagnostics;
using Npgsql;

class Program
{
    static void Main(string[] args)
    {
        string foreignHost = "foreign_host";
        string foreignDatabase = "foreign_database";
        string localHost = "local_host";
        string localDatabase = "local_database";
        string username = "username";
        string password = "password";

        // Chuỗi kết nối đến database
        string connString = $"Host={localHost};Username={username};Password={password};Database={localDatabase}";

        using (var conn = new NpgsqlConnection(connString))
        {
            conn.Open();

            // Lấy danh sách các bảng bị thiếu từ view
            string query = "SELECT table_name FROM public.v_missing_tables";
            using (var cmd = new NpgsqlCommand(query, conn))
            using (var reader = cmd.ExecuteReader())
            {
                while (reader.Read())
                {
                    string tableName = reader.GetString(0);
                    Console.WriteLine($"Processing table: {tableName}");

                    // Export DDL từ foreign database
                    string exportFile = $"{tableName}.sql";
                    string exportCmd = $"pg_dump -h {foreignHost} -U {username} -s -t {tableName} {foreignDatabase} -f {exportFile}";

                    ExecuteCommand(exportCmd);

                    // Import DDL vào database hiện tại
                    string importCmd = $"psql -h {localHost} -U {username} -d {localDatabase} -f {exportFile}";

                    ExecuteCommand(importCmd);
                }
            }
        }
    }

    static void ExecuteCommand(string command)
    {
        var processInfo = new ProcessStartInfo("cmd.exe", "/c " + command)
        {
            RedirectStandardError = true,
            RedirectStandardOutput = true,
            UseShellExecute = false,
            CreateNoWindow = true
        };

        var process = new Process
        {
            StartInfo = processInfo
        };

        process.Start();
        process.WaitForExit();

        string output = process.StandardOutput.ReadToEnd();
        string error = process.StandardError.ReadToEnd();

        if (!string.IsNullOrEmpty(output))
        {
            Console.WriteLine(output);
        }

        if (!string.IsNullOrEmpty(error))
        {
            Console.WriteLine(error);
        }
    }
}
[root@CTS-VIPRO2 ~]# sudo yum install -y kong-3.7.0.rpm
Updating Subscription Management repositories.
Warning: failed loading '/etc/yum.repos.d/media.repo', skipping.
Red Hat Enterprise Linux 8 for x86_64 - BaseOS (RPMs)                                                                                                                                                        0.0  B/s |   0  B     00:00
Errors during downloading metadata for repository 'rhel-8-for-x86_64-baseos-rpms':
  - Curl error (6): Couldn't resolve host name for https://cdn.redhat.com/content/dist/rhel8/8/x86_64/baseos/os/repodata/repomd.xml [Could not resolve host: cdn.redhat.com]
Error: Failed to download metadata for repo 'rhel-8-for-x86_64-baseos-rpms': Cannot download repomd.xml: Cannot download repodata/repomd.xml: All mirrors were tried
[root@CTS-VIPRO2 ~]# rpm -iv kong-3.7.0.rpm
warning: kong-3.7.0.rpm: Header V4 RSA/SHA256 Signature, key ID eb9e8e18: NOKEY
error: Failed dependencies:
        perl is needed by kong-0:3.7.0-1.x86_64
        perl-Time-HiRes is needed by kong-0:3.7.0-1.x86_64
