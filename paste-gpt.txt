Phương thức `getFromCache` trong một HTTP Interceptor trong Angular được sử dụng để tìm kiếm các yêu cầu HTTP trước đó từ một cache mà bạn đã thiết lập. Việc xử lý này có thể được thực hiện sử dụng cache do trình duyệt quản lý hoặc một cache tùy chỉnh được bạn thiết kế. Dưới đây là một ví dụ đơn giản về cách bạn có thể cài đặt phương thức `getFromCache` sử dụng `HttpCache` để lưu trữ và truy xuất các phản hồi HTTP.

### 1. Thiết lập Cache
Đầu tiên, bạn cần có một cơ chế để lưu trữ và truy xuất các phản hồi. Dưới đây là một lớp đơn giản để thực hiện cache:

```typescript
import { HttpResponse } from '@angular/common/http';

export class HttpCacheService {
  private cache = new Map<string, HttpResponse<any>>();

  put(key: string, value: HttpResponse<any>): void {
    this.cache.set(key, value);
  }

  get(key: string): HttpResponse<any> | null {
    return this.cache.get(key) || null;
  }
}
```

### 2. Cài đặt Interceptor
Sau khi đã có service để quản lý cache, bạn có thể tiến hành viết logic trong interceptor để kiểm tra cache trước khi thực hiện yêu cầu:

```typescript
import { Injectable } from '@angular/core';
import { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpResponse } from '@angular/common/http';
import { Observable, of } from 'rxjs';
import { HttpCacheService } from './http-cache.service';

@Injectable()
export class CacheInterceptor implements HttpInterceptor {
  constructor(private cacheService: HttpCacheService) {}

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    // Chỉ cache cho GET requests
    if (req.method !== 'GET') {
      return next.handle(req);
    }

    // Kiểm tra cache
    const cachedResponse: HttpResponse<any> | null = this.cacheService.get(req.url);
    if (cachedResponse) {
      return of(cachedResponse);
    }

    return next.handle(req).do(event => {
      // Lưu response vào cache nếu đó là một HttpResponse
      if (event instanceof HttpResponse) {
        this.cacheService.put(req.url, event);
      }
    });
  }
}
```

### 3. Cung cấp Cache Service và Interceptor
Cuối cùng, đảm bảo bạn đã cung cấp `HttpCacheService` và `CacheInterceptor` trong module của bạn:

```typescript
@NgModule({
  providers: [
    HttpCacheService,
    {
      provide: HTTP_INTERCEPTORS,
      useClass: CacheInterceptor,
      multi: true
    }
  ]
})
export class AppModule { }
```

Trong ví dụ này, `CacheInterceptor` sẽ kiểm tra xem có phản hồi HTTP được cache cho yêu cầu hiện tại hay không trước khi thực hiện yêu cầu đó. Nếu tìm thấy, nó sẽ trả lại phản hồi từ cache ngay lập tức mà không cần gửi yêu cầu đến server. Điều này có thể giúp giảm độ trễ và tải trên server, cũng như cải thiện hiệu suất ứng dụng cho người dùng.
